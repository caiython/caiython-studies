# -*- coding: utf-8 -*-
"""python3_exercicios_map,reduce,filter,list_comprehension,enumerate,erros_e_excecoes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SXKicrqmdFsL0veyz4wDqPyBqgtOmZ5k

# Função map()
Lista de exercícios resolvidos voltados ao uso da função built-in **map()** utilizando a Linguagem Python

1. Use a função map() para imprimir o quadrado de cada número arredondado para duas casas decimais
"""

#Dados
numeros_decimais = [4.35, 6.09, 3.25, 9.77, 2.16, 8.88, 4.59]

#Resolução
list(map(lambda x: round(x**3,2),numeros_decimais))

"""2. Escreva um programa Python para somar os elementos de três listas fornecidas usando map() e lambda."""

#Dados
lista1 = [1, 2, 3]
lista2 = [2, 3, 4]
lista3 = [3, 4, 5]

#Resolução
list(map(lambda x, y, z: x + y + z, lista1, lista2, lista3))

"""3. Escreva um programa Python para listar a lista de strings fornecidas individualmente usando a função map()"""

#Dados
lista_de_cores = ["Azul", "Vermelho", "Verde", "Amrelo"]

#Resolução

def listaItens(lista):
  resultado = []
  for i in lista:
    resultado.append(i)
  return resultado
  
list(map(listaItens,lista_de_cores))

"""4. Escreva um programa Python para criar uma lista contendo a potência do referido número em bases elevadas ao número correspondente no índice usando a função map()"""

#Dados
lista_de_bases = [1, 2, 3, 4, 5, 6, 7, 8, 9]
lista_de_expoentes = [1, 2, 3, 4, 5, 6, 7, 8, 9]

#Resolução
list(map(lambda x, y: x**y, lista_de_bases, lista_de_expoentes))

"""5. Escreva um programa Python para elevar ao quadrado os elementos de uma lista usando a função map()."""

#Dados
lista_de_numeros = [0,1,2,3,4,5,6,7,8,9]

#Resolução
list(map(lambda x: x**2,lista_de_numeros))

"""6. Escreva um programa Python para converter todos os caracteres em tuplas de caracteres maiúsculos e minúsculos, e eliminar letras duplicadas de uma determinada sequência. Use a função map()"""

#Dados
lista_de_caracteres = ['a','b','c','a','B','C']

#Resolução
set(map(lambda x: (str(x).upper(), str(x).lower()), lista_de_caracteres))

"""7. Escreva um programa em Python para adicionar duas listas fornecidas e retornar a soma e a subtração entre os elementos das listas. Use a função map()."""

#Dados
lista_1 = [6, 5, 3, 9]
lista_2 = [0, 1, 7, 7]

#Resolução
list(map(lambda x,y: (x+y, x-y), lista_1, lista_2))

"""8. Escreva um programa Python para converter uma determinada lista de inteiros e uma tupla de inteiros em uma lista de strings."""

#Dados
nums_list = [1,2,3,4]
nums_tuple = (0, 1, 2, 3)

#Resolução
nums_list_str = list(map(lambda x: str(x), nums_list))
nums_tuple_str = tuple(map(lambda x: str(x), nums_tuple))

print(nums_list_str)
print(nums_tuple_str)

"""9. Escreva um programa Python para criar uma nova lista pegando elementos específicos de uma tupla e converta um valor de string em inteiro."""

#Dados
lista_de_str = ['1','2','3','4']

#Resolução
list(map(int,lista_de_str))

"""10. Escreva um programa em Python para calcular o quadrado dos 10 primeiros números de Fibonacci, usando a função map e gere uma lista dos números."""

#Dados
n = 10

#Resolução

from itertools import islice

def numerosFibonacci (x=0,y=1):
  yield x
  while True:
    yield y
    x, y = y, x + y

primeiros_n_numeros_fibonacci = list(islice(numerosFibonacci(),n))

list(map(lambda x: x**2,primeiros_n_numeros_fibonacci))

"""11. Escreva um programa Python para calcular a soma dos elementos de um determinado array de inteiros, use a função map()."""

#Dados
from array import array
numeros = array('i',[1,2,3,4,5,6,7,8,9,10])

#Resolução

def somaArray(lista):
  soma = 0
  for i in lista:
    soma += i
  return soma

array_numeros = list(map(int,numeros))

somaArray(array_numeros)

"""12. Escreva um programa em Python para encontrar a proporção de números positivos, números negativos e zeros em um array de inteiros."""

#Dados
from array import array
numeros = array('i', [-5,-4,-3,-2,-1,0,1,2,3,4])

#Resolução
def percentPosNegZero(array_de_numeros):
  total = len(array_de_numeros)
  n1 = n2 = n3 = 0
  for n in array_de_numeros:
    if n > 0:
      n1 += 1
    elif n < 0:
      n2 += 1
    else:
      n3 += 1
  
  return [n1/total*100, n2/total*100, n3/total*100]

array_de_numeros = list(map(int,numeros))
percentPosNegZero(array_de_numeros)

"""13. Escreva um programa Python para contar pares entre duas listas fornecidas. Use a função map()"""

#Dados
lista1 = [10,44,23,20,97,65,21,99,13]
lista2 = [10,39,25,19,97,65,73,53,13]

#Resolução

from operator import eq

def contaPares(l1,l2):
  result = sum(map(eq,l1,l2))
  return result

contaPares(lista1,lista2)

"""14. Escreva um programa Python para intercalar duas listas em outra lista aleatoriamente usando a função map()."""

#Dados
lista1 = ['A','B','C','D','E','F']
lista2 = [1,2,3,4,5,6]

#Resolução

import random

def listaAleatoria(lista1,lista2):
  result = list(map(next, random.sample([iter(lista1)]*len(lista1)+[iter(lista2)]*len(lista2),(len(lista1)+len(lista2)))))
  return result

listaAleatoria(lista1,lista2)

"""15. Escreva um programa Python para dividir um determinado dicionário de listas em uma lista de dicionários usando a função map()"""

#Dados
dicionarios = {'Science': [88, 89, 62, 95], 'Language': [77, 78, 84, 80]}

#Resolução

def lista_de_dicionarios(dicionarios):
  resultado = list(map(dict,zip(*[[(key,val) for val in value] for key, value in dicionarios.items()])))
  return resultado

lista_de_dicionarios(dicionarios)

"""16. Escreva um programa Python para converter uma determinada lista de strings em uma lista de listas usando a função map()."""

#Dados
lista_de_string = ["Azul","Amarelo","Turquesa","Vermelho","Verde","Preto","Branco"]

#Resolução

def listaLista(lista):
  resultado = list(map(list,lista))
  return resultado

listaLista(lista_de_string)

"""17. Escreva um programa Python para converter uma determinada lista de tuplas em uma lista de strings usando a função map."""

#Dados
lista_de_tuplas = [("Azul","Amarelo"),("Verde","Vermelho"),("Ciano","Cinza")]

#Resolução

def converteTuplas(lista_de_tuplas):
    result = list(map(' '.join, lista_de_tuplas))
    return result

converteTuplas(lista_de_tuplas)